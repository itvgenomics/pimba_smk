# Snakefile

import os
from math import floor

# Prepare paths
rawdata = os.path.join("results", "00-prepare", config['outputprepare'] + '.fasta')
file_name_raw = config['outputprepare']
current_path = os.getcwd()
output_dir = os.path.join(current_path, "results", "01-run", config['outputrun'])

# Derived parameters
similarity_int = floor(config['otu_similarity'] * 100)
coverage_int = floor(config['mincoverage'] * 100)
similarity_int_asg = floor(config['assign_similarity'] * 100)
strategy = config['strategy']
marker_gene = config['marker_gene']
lulu = config['lulu']
ITS = config['ITS']
NCBI_DB = config['NCBI-DB']
remote = config['remote']

# Define the list of files for the `all` rule
files_for_all_rule = [
    os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt'),
    os.path.join(output_dir, file_name_raw + '_biom_table')
]

# Rules
rule all:
    input:
        files_for_all_rule

if marker_gene == "16S-NCBI":
    rule run_create_taxon_table:
        input:
            blast_log = os.path.join(output_dir, file_name_raw + '_blast_ncbi.log'),
            txt_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
        output:
            tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt')
        params:
            taxdump = config['taxdump']
        log:
            os.path.join(current_path, "results", "01-run", "logs", "create_taxon_table", file_name_raw + ".log")
        singularity:
            "docker://itvdsbioinfo/pimba_qiimepipe:v2"
        shell:
            """
            mkdir -p {output_dir}/diversity_by_sample
            cd {output_dir}/diversity_by_sample
            echo "Running the QiimePipe Container - createTaxonTable_singleFile.py: "
            python3.6 /qiimepipe/createTaxonTable_singleFile.py {input.blast_log} {input.txt_table} {params.taxdump}/rankedlineage.dmp > {log} 2>&1
            cd ../
            mkdir -p {output_dir}/output
            mv *_otus_tax_assignments.txt {output.tax_assignments}
            """

elif marker_gene == "COI-NCBI":
    rule run_create_taxon_table:
        input:
            blast_log = os.path.join(output_dir, file_name_raw + '_blast_ncbi.log'),
            txt_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
        output:
            tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt')
        params:
            taxdump = config['taxdump']
        log:
            os.path.join(current_path, "results", "01-run", "logs", "create_taxon_table", file_name_raw + ".log")
        singularity:
            "docker://itvdsbioinfo/pimba_qiimepipe:v2"
        shell:
            """
            mkdir -p {output_dir}/diversity_by_sample
            cd {output_dir}/diversity_by_sample
            echo "Running the QiimePipe Container - createTaxonTable_singleFile.py: "
            python3.6 /qiimepipe/createTaxonTable_singleFile.py {input.blast_log} {input.txt_table} {params.taxdump}/rankedlineage.dmp > {log} 2>&1
            cd ../
            mkdir -p {output_dir}/output
            mv *_otus_tax_assignments.txt {output.tax_assignments}
            """

elif marker_gene == "ITS-PLANTS-NCBI":
    rule run_create_plants_taxon_table:
        input:
            blast_plants_log = os.path.join(output_dir, file_name_raw + '_blast_plants.log'),
            plants_table = os.path.join(output_dir, file_name_raw + '_otu_table_plants.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table_plants.txt'),
            filtered_fasta = os.path.join(output_dir, file_name_raw + '_otus_filtered.fasta') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asvs_filtered.fasta')
        output:
            tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt'),
            final_fasta = os.path.join(output_dir, file_name_raw + '_otus_plants.fasta') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asvs_plants.fasta'),
            txt_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
        params:
            taxdump = config['taxdump'],
            strategy = strategy
        log:
            os.path.join(current_path, "results", "01-run", "logs", "create_taxon_table", file_name_raw + ".log")
        singularity:
            "docker://itvdsbioinfo/pimba_qiimepipe:v2"
        shell:
            """
            mkdir -p {output_dir}/diversity_by_sample
            cd {output_dir}/diversity_by_sample
            echo "Running the QiimePipe Container - createTaxonTable_singleFile.py: "
            python3.6 /qiimepipe/createTaxonTable_singleFile.py {input.blast_plants_log} {input.plants_table} {params.taxdump}/rankedlineage.dmp > {log} 2>&1
            cd ../
            mkdir -p {output_dir}/output
            mv *_otus_tax_assignments.txt {output.tax_assignments}
            cp {input.filtered_fasta} {output.final_fasta}
            cp {input.plants_table} {output.txt_table}
            """

elif marker_gene == "ITS-FUNGI-NCBI":
    rule run_create_plants_taxon_table:
        input:
            blast_fungi_log = os.path.join(output_dir, file_name_raw + '_blast_fungi.log'),
            fungi_table = os.path.join(output_dir, file_name_raw + '_otu_table_fungi.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table_fungi.txt')
        output:
            tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt'),
            txt_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
        params:
            taxdump = config['taxdump'],
            strategy = strategy
        log:
            os.path.join(current_path, "results", "01-run", "logs", "create_taxon_table", file_name_raw + ".log")
        singularity:
            "docker://itvdsbioinfo/pimba_qiimepipe:v2"
        shell:
            """
            mkdir -p {output_dir}/diversity_by_sample
            cd {output_dir}/diversity_by_sample
            echo "Running the QiimePipe Container - createTaxonTable_singleFile.py: "
            python3.6 /qiimepipe/createTaxonTable_singleFile.py {input.blast_fungi_log} {input.fungi_table} {params.taxdump}/rankedlineage.dmp > {log} 2>&1
            cd ../
            mkdir -p {output_dir}/output
            mv *_otus_tax_assignments.txt {output.tax_assignments}
            cp {input.fungi_table} {output.txt_table}
            """

elif marker_gene == "ALL-NCBI":
    rule run_create_taxon_table:
        input:
            blast_log = os.path.join(output_dir, file_name_raw + '_blast_ncbi.log'),
            txt_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
        output:
            tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt')
        params:
            taxdump = config['taxdump']
        log:
            os.path.join(current_path, "results", "01-run", "logs", "create_taxon_table", file_name_raw + ".log")
        singularity:
            "docker://itvdsbioinfo/pimba_qiimepipe:v2"
        shell:
            """
            mkdir -p {output_dir}/diversity_by_sample
            cd {output_dir}/diversity_by_sample
            echo "Running the QiimePipe Container - createTaxonTable_singleFile.py: "
            python3.6 /qiimepipe/createTaxonTable_singleFile.py {input.blast_log} {input.txt_table} {params.taxdump}/rankedlineage.dmp > {log} 2>&1
            cd ../
            mkdir -p {output_dir}/output
            mv *_otus_tax_assignments.txt {output.tax_assignments}
            """

rule convert_otu_table_to_biom:
    input:
        table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt')
    output:
        biom = os.path.join(output_dir, file_name_raw + '_otu_table.biom') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.biom')
    log:
        os.path.join(current_path, 'results', '01-run', 'logs', 'convert_otu_table_to_biom', file_name_raw + '.log')
    singularity:
        "docker://itvdsbioinfo/pimba_biom:v2.1.10"
    shell:
        """
        echo "Running the Biom-Format Container - convert: "
        biom convert -i {input.table} -o {output.biom} \
        --table-type="OTU table" --to-json &> {log}
        """

rule add_metadata_to_biom_table:
    input:
        biom = os.path.join(output_dir, file_name_raw + '_otu_table.biom') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.biom'),
        tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt')
    output:
        biom_with_metadata = os.path.join(output_dir, file_name_raw + '_otu_table_tax.biom') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table_tax.biom')
    log:
        os.path.join(current_path, 'results', '01-run', 'logs', 'add_metadata_to_biom_table', file_name_raw + '.log')
    singularity:
        "docker://itvdsbioinfo/pimba_biom:v2.1.10"
    shell:
        """
        echo "Running the Biom-Format Container - add-metadata: "
        biom add-metadata -i {input.biom} -o {output.biom_with_metadata} \
        --observation-metadata-fp {input.tax_assignments} --observation-header OTUID,taxonomy,confidence \
        --sc-separated taxonomy --float-fields confidence &> {log}
        """

rule summarize_biom_table:
    input:
        biom_with_metadata = os.path.join(output_dir, file_name_raw + '_otu_table_tax.biom') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table_tax.biom')
    output:
        summary = os.path.join(output_dir, file_name_raw + '_biom_table')
    log:
        os.path.join(current_path, 'results', '01-run', 'logs', 'summarize_biom_table', file_name_raw + '.log')
    singularity:
        "docker://itvdsbioinfo/pimba_biom:v2.1.10"
    shell:
        """
        echo "Running the Biom-Format Container - summarize-table: "
        biom summarize-table -i {input.biom_with_metadata} -o {output.summary} &> {log}
        """