import os
import glob

current_path = os.getcwd()

# Extract sample name from the single FASTQ file
raw_fastq = config["raw_fastq_single"]

def read_sample_names(file_path):
    with open(file_path, 'r') as f:
        return [line.split('\t')[0] for line in f]

# Extract sample names from barcodes_3end_txt
barcodes_5end_txt = config["barcodes_5end_txt"]
SAMPLES = read_sample_names(barcodes_5end_txt)

prefix = config["prefix"]

rule all:
    input:
        expand(os.path.join(current_path, "results", "00-prepare", "prepare_output", prefix + "_{sample}.fastq"), sample=SAMPLES),
        os.path.join(current_path, "results", "00-prepare", "prepare_output", config["outputprepare"] + ".fastq"),
        os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_min.truncated").format(output_name=config["outputprepare"]),
        os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_clipped.fastq").format(output_name=config["outputprepare"]),
        os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_good.truncated").format(output_name=config["outputprepare"]),
        os.path.join(current_path, "results", "00-prepare", "{output_name}.fasta").format(output_name=config["outputprepare"])

rule run_fastx_barcode_splitter:
    input:
        rawdata = raw_fastq,
        barcodes_5end_txt = barcodes_5end_txt
    output:
        forbol_file = expand(os.path.join(current_path, "results", "00-prepare", "prepare_output", prefix + "_{sample}.fastq"), sample=SAMPLES),
        unmatchedforbol = os.path.join(current_path, "results", "00-prepare", "prepare_output", prefix + "_unmatched.fastq")
    params:
        prefix = prefix
    log:
        os.path.join(current_path, 'results', '00-prepare', 'logs', 'fastx_barcode_splitter', config["outputprepare"] + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "prepare_fastx_barcode_splitter.txt")
    singularity:
        "docker://itvdsbioinfo/pimba_fastxtoolkit:v0.0.14"
    shell:
        """
        echo "Creating and running a fastxtoolkit Container: "
        mkdir -p {current_path}/results/00-prepare/prepare_output
        cat {input.rawdata} | fastx_barcode_splitter.pl --bcfile {input.barcodes_5end_txt} --prefix {current_path}/results/00-prepare/prepare_output/{params.prefix}_ --suffix .fastq --bol --exact > {log} 2>&1
        """

rule concatenate_samples:
    input:
        fastq_sample = expand(os.path.join(current_path, "results", "00-prepare", "prepare_output", prefix + "_{sample}.fastq"), sample=SAMPLES)
    output:
        fastq_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", config["outputprepare"] + ".fastq")
    params:
        prefix = prefix
    shell:
        """
        cat {current_path}/results/00-prepare/prepare_output/{params.prefix}_R* > {output.fastq_file}
        """

rule run_adapter_removal:
    input:
        fastq_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", config["outputprepare"] + ".fastq")
    output:
        discarded_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_min.discarded").format(output_name=config["outputprepare"]),
        truncated_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_min.truncated").format(output_name=config["outputprepare"]),
        settings_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_min.settings").format(output_name=config["outputprepare"])
    params:
        num_threads = config["num_threads"],
        minphred = config["minphred"],
        minlength = config["minlength"],
        output_name = config["outputprepare"]
    log:
        os.path.join(current_path, 'results', '00-prepare', 'logs', 'adapter_removal', config["outputprepare"] + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "prepare_adapter_removal.txt")
    singularity:
        "docker://itvdsbioinfo/pimba_adapterremoval:v2.2.3"
    shell:
        """
        echo "Creating and running an AdapterRemoval Container: "
        AdapterRemoval --file1 {input.fastq_file} --threads {params.num_threads} \
        --minlength {params.minlength} --qualitymax 64 --basename {current_path}/results/00-prepare/prepare_output/{params.output_name}_min > {log} 2>&1
        """

rule run_qiimepipe_strip:
    input:
        truncated_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_min.truncated").format(output_name=config["outputprepare"])
    output:
        clipped_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_clipped.fastq").format(output_name=config["outputprepare"])
    params:
        adapter = config["singleadapter"],
        barcodes_5end_fasta = config["barcodes_5end_fasta"]
    benchmark:
        os.path.join(current_path, "results", "benchmark", "prepare_qiimepipe_strip.txt")
    singularity:
        "docker://itvdsbioinfo/pimba_qiimepipe:v2"
    shell:
        """
        echo "Running the QiimePipe Container: "
        python3.6 /qiimepipe/fastq_strip_barcode_relabel2.py {input.truncated_file} {params.adapter} {params.barcodes_5end_fasta} Seq > {output.clipped_file}
        """

rule run_adapter_removal_clipped:
    input:
        clipped_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_clipped.fastq").format(output_name=config["outputprepare"])
    output:
        discarded_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_good.discarded").format(output_name=config["outputprepare"]),
        truncated_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_good.truncated").format(output_name=config["outputprepare"]),
        settings_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_good.settings").format(output_name=config["outputprepare"])
    params:
        num_threads = config["num_threads"],
        minphred = config["minphred"],
        minlength = config["minlength"],
        output_name = config["outputprepare"]
    log:
        os.path.join(current_path, 'results', '00-prepare', 'logs', 'adapter_removal', config["outputprepare"] + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "prepare_adapter_removal_clipped.txt")
    singularity:
        "docker://itvdsbioinfo/pimba_adapterremoval:v2.2.3"
    shell:
        """
        echo "Creating and running an AdapterRemoval Container: "
        AdapterRemoval --file1 {input.clipped_file} --threads {params.num_threads} --trimwindows 10 \
        --minquality {params.minphred} --minlength {params.minlength} --qualitymax 64 --basename {current_path}/results/00-prepare/prepare_output/{params.output_name}_good > {log} 2>&1
        """

rule run_prinseq_truncated:
    input:
        truncated_file = os.path.join(current_path, "results", "00-prepare", "prepare_output", "{output_name}_good.truncated").format(output_name=config["outputprepare"])
    output:
        good_fasta = os.path.join(current_path, "results", "00-prepare", "{output_name}.fasta").format(output_name=config["outputprepare"])
    params:
        output_name = config["outputprepare"]
    log:
        os.path.join(current_path, 'results', '00-prepare', 'logs', 'prinseq_truncated', config["outputprepare"] + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "prepare_prinseq_truncated.txt")
    singularity:
        "docker://itvdsbioinfo/pimba_prinseq:v0.20.4"
    shell:
        """
        echo "Creating and running a Prinseq Container: "
        prinseq-lite.pl -fastq {input.truncated_file} -out_format 1 -out_good {current_path}/results/00-prepare/prepare_output/{params.output_name} > {log} 2>&1

        mv {current_path}/results/00-prepare/prepare_output/{params.output_name}.fasta {current_path}/results/00-prepare/
        """