import os

# Prepare paths
rawdata = os.path.join("results", "00-prepare", config['outputprepare'] + '.fasta')
file_name_raw = config['outputprepare']
current_path = os.getcwd()
output_dir = os.path.join(current_path, "results", "01-run", config['outputrun'])

# Derived parameters
strategy = config['strategy']

rule all:
    input:
        os.path.join(output_dir, 'output', 'plot_' + file_name_raw + '_tax_assignments.txt'),
        os.path.join(current_path, 'results', '02-plot', 'plots', 'alpha_diversity_dotplot.svg'),
        os.path.join(current_path, 'results', '02-plot', 'plots', 'cluster_bootstrap1000.svg')

rule prepare_tax_assignments:
    input:
        tax_assignments = os.path.join(output_dir, 'output', file_name_raw + '_otus_tax_assignments.txt') if strategy == "otu" else os.path.join(output_dir, 'output', file_name_raw + '_asvs_tax_assignments.txt')
    output:
        prepared_tax_assignments = os.path.join(output_dir, 'output', 'plot_' + file_name_raw + '_tax_assignments.txt')
    shell:
        """
        cp {input.tax_assignments} {output.prepared_tax_assignments}
        
        COLUMNS=$(head -1 {output.prepared_tax_assignments} | sed -e 's/[^\t]//g' | wc -c)
        temp_file=$(mktemp)    
        if [ "$COLUMNS" -gt 3 ]; 
        then 
            echo -e "otu_id\tkingdom\tphylum\tclass\torder\tfamily\tgenus\tspecies\tsimilarity\taux" > "$temp_file"
        else
            echo -e "otu_id\tkingdom\tphylum\tclass\torder\tfamily\tgenus\tspecies\tsimilarity" > "$temp_file"
        fi

        cat "{output.prepared_tax_assignments}" >> "$temp_file"
        mv "$temp_file" "{output.prepared_tax_assignments}"

        sed -i 's/;/\t/g' {output.prepared_tax_assignments}
        sed -i 's/k__//g' {output.prepared_tax_assignments}
        sed -i 's/p__//g' {output.prepared_tax_assignments}
        sed -i 's/c__//g' {output.prepared_tax_assignments}
        sed -i 's/o__//g' {output.prepared_tax_assignments}
        sed -i 's/f__//g' {output.prepared_tax_assignments}
        sed -i 's/g__//g' {output.prepared_tax_assignments}
        sed -i 's/s__//g' {output.prepared_tax_assignments}
        sed -i 's/D_0__//g' {output.prepared_tax_assignments}
        sed -i 's/D_1__//g' {output.prepared_tax_assignments}
        sed -i 's/D_2__//g' {output.prepared_tax_assignments}
        sed -i 's/D_3__//g' {output.prepared_tax_assignments}
        sed -i 's/D_4__//g' {output.prepared_tax_assignments}
        sed -i 's/D_5__//g' {output.prepared_tax_assignments}
        sed -i 's/D_6__//g' {output.prepared_tax_assignments}
        sed -i 's/Unassigned/Unassigned\tUnassigned\tUnassigned\tUnassigned\tUnassigned\tUnassigned\tUnassigned/g' {output.prepared_tax_assignments}
        """

rule run_plot_graphs:
    input:
        otu_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt'),
        prepared_tax_assignments = os.path.join(output_dir, 'output', 'plot_' + file_name_raw + '_tax_assignments.txt'),
        metadata = config['metadata']
    output:
        os.path.join(current_path, 'results', '02-plot', 'plots', 'alpha_diversity_dotplot.svg')
    log:
        os.path.join(current_path, 'results', '02-plot', 'logs', 'plot_graphs', file_name_raw + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "plot_graphs_python.txt")
    singularity:
        f"{config['sif_dir']}/pimba_python_plot.sif"
    params:
        group_by = config['group_by']
    shell:
        """
        mkdir -p {current_path}/results/02-plot/
        cd {current_path}/results/02-plot/
        echo "Running the plot python container: "
        eval "$(conda shell.bash hook)"
        conda activate plot_env
        python /app/pimba_plot_graphs.py -o {input.otu_table} -t {input.prepared_tax_assignments} -m {input.metadata} -g {params.group_by} \
        > {log} 2>&1
        """

rule run_pvclust:
    input:
        otu_table = os.path.join(output_dir, file_name_raw + '_otu_table.txt') if strategy == "otu" else os.path.join(output_dir, file_name_raw + '_asv_table.txt'),
        prepared_tax_assignments = os.path.join(output_dir, 'output', 'plot_' + file_name_raw + '_tax_assignments.txt'),
        metadata = config['metadata']
    output:
        os.path.join(current_path, 'results', '02-plot', 'plots', 'cluster_bootstrap1000.svg')
    log:
        os.path.join(current_path, 'results', '02-plot', 'logs', 'pvclust', file_name_raw + '.log')
    benchmark:
        os.path.join(current_path, "results", "benchmark", "plot_pvclust.txt")
    singularity:
        f"{config['sif_dir']}/pimba_phyloseq.sif"
    params:
        group_by = config['group_by']
    shell:
        """
        mkdir -p {current_path}/results/02-plot/
        cd {current_path}/results/02-plot/plots
        echo "Running the pvclust container: "
        Rscript /app/pvclust.R {input.otu_table} {input.prepared_tax_assignments} {input.metadata} {params.group_by} \
        > {log} 2>&1
        """